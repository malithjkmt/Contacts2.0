/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dialog;

import app.BranchTableModel;
import com.jtattoo.plaf.aluminium.AluminiumLookAndFeel;
import dac.BranchDAC;
import dac.DbConnector;
import data.Branch;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Malith
 */
public class ManageBranches extends javax.swing.JDialog {

    BranchDAC branchDAC;
    Branch selectedBranch;

    /**
     * Creates new form ManageBranches
     */
    public ManageBranches(java.awt.Frame parent, boolean modal, BranchDAC branchDAC) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        this.branchDAC = branchDAC;

        loadTable();
        jScrollPane1.getViewport().setOpaque(false);

        table.getColumnModel().getColumn(0).setMaxWidth(150);
        table.getColumnModel().getColumn(0).setMinWidth(150);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

        autocmbBranchCode.setKeyWord(getBranchCodes());
        autocmbBranchName.setKeyWord(getBranchNames());

    }

    private void loadTable() {
        try {
            // get all branch theough the DAC to a tempory List
            List branchList = branchDAC.getAllBranchOrderByBranchCode();

            // create the model and update the "table"
            BranchTableModel model = new BranchTableModel(branchList);
            table.setModel(model);

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String[] getBranchNames() {

        try {

            List<Branch> list = branchDAC.getAllBranchOrderByBranchName();
            int size = list.size();
            String[] nameArray = new String[size];
            for (int i = 0; i < size; i++) {
                nameArray[i] = list.get(i).getBranchName();
            }
            return nameArray;

        } catch (Exception ex) {
            Logger.getLogger(BranchFinder.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private String[] getBranchCodes() {

        try {

            List<Branch> list = branchDAC.getAllBranchOrderByBranchCode();
            int size = list.size();
            String[] codeArray = new String[size];
            for (int i = 0; i < size; i++) {
                codeArray[i] = Integer.toString(list.get(i).getBranchCode());
            }
            return codeArray;

        } catch (Exception ex) {
            Logger.getLogger(BranchFinder.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        autocmbBranchCode = new acombo.AutoComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        autocmbBranchName = new acombo.AutoComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnAddNewBranch = new javax.swing.JButton();
        btnUpdateBranch = new javax.swing.JButton();
        btnRemoveBranch = new javax.swing.JButton();
        btnViewBranch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        autocmbBranchCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autocmbBranchCodeActionPerformed(evt);
            }
        });

        jLabel1.setText("Branch Code");

        jLabel2.setText("Branch Name");

        autocmbBranchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autocmbBranchNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(autocmbBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(autocmbBranchName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autocmbBranchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(autocmbBranchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setOpaque(false);

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Branch Code", "Branch Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setOpaque(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        btnAddNewBranch.setText("Add New Branch");
        btnAddNewBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewBranchActionPerformed(evt);
            }
        });

        btnUpdateBranch.setText("Update Branch");
        btnUpdateBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateBranchActionPerformed(evt);
            }
        });

        btnRemoveBranch.setText("Remove Branch");
        btnRemoveBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveBranchActionPerformed(evt);
            }
        });

        btnViewBranch.setText("View Branch");
        btnViewBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewBranchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddNewBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewBranch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateBranch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddNewBranch, btnRemoveBranch, btnUpdateBranch, btnViewBranch});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewBranch)
                    .addComponent(btnUpdateBranch)
                    .addComponent(btnRemoveBranch)
                    .addComponent(btnViewBranch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autocmbBranchCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autocmbBranchCodeActionPerformed
        try {
            selectedBranch = branchDAC.searchBranch(autocmbBranchCode.getSelectedItem().toString());
            int branchCode = selectedBranch.getBranchCode();
            autocmbBranchName.setSelectedItem(selectedBranch.getBranchName());
            table.requestFocus();
            table.setRowSelectionInterval(branchCode - 1, branchCode - 1);
        } catch (NullPointerException e) {
            System.out.println("just Kidding!!!");

        } catch (IllegalArgumentException ex) {
            System.out.println(ex.toString());

        } catch (Exception ex) {
            Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_autocmbBranchCodeActionPerformed

    private void autocmbBranchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autocmbBranchNameActionPerformed

        try {

            selectedBranch = branchDAC.searchBranchCode(autocmbBranchName.getSelectedItem().toString());
            int branchCode = selectedBranch.getBranchCode();
            autocmbBranchCode.setSelectedItem(selectedBranch.getBranchCode());
            //table.requestFocus();
            table.setRowSelectionInterval(branchCode - 1, branchCode - 1);
        } catch (NullPointerException e) {
            System.out.println("just Kidding!!!");
        } catch (IllegalArgumentException ex) {
            System.out.println(ex.toString());
        } catch (Exception ex) {
            Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_autocmbBranchNameActionPerformed

    private void btnRemoveBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBranchActionPerformed

        try {
            // delete the branch
            branchDAC.deleteBranch(selectedBranch.getBranchCode());

        } catch (NullPointerException ex) {
            //get selected row
            int row = table.getSelectedRow();

            //make sure a row is selected
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "You must select a branch", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // get the current Branch
            selectedBranch = (Branch) table.getValueAt(row, BranchTableModel.OBJECT_COL);

            try {
                // delete the branch
                branchDAC.deleteBranch(selectedBranch.getBranchCode());
            } catch (SQLException ex1) {
                Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex);
        }

        // refresh GUI
        refreshGUI();
         this.selectedBranch = null;
    }//GEN-LAST:event_btnRemoveBranchActionPerformed

    private void btnViewBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewBranchActionPerformed

        AddNewBranch addNewBranch = new AddNewBranch(null, rootPaneCheckingEnabled, branchDAC);
        try {
            addNewBranch.populateGUI(selectedBranch);
        } catch (NullPointerException e) {
            //get selected row
            int row = table.getSelectedRow();

            //make sure a row is selected
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "You must select a branch", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // get the current Branch
            selectedBranch = (Branch) table.getValueAt(row, BranchTableModel.OBJECT_COL);
            addNewBranch.populateGUI(selectedBranch);
        }
        addNewBranch.setVisible(true);
    }//GEN-LAST:event_btnViewBranchActionPerformed

    private void btnAddNewBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewBranchActionPerformed
        new AddNewBranch(null, true, branchDAC).setVisible(true);
        refreshGUI();
    }//GEN-LAST:event_btnAddNewBranchActionPerformed

    private void btnUpdateBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateBranchActionPerformed
        AddNewBranch addNewBranch = new AddNewBranch(null, rootPaneCheckingEnabled, branchDAC);
        try {
            addNewBranch.populateGUI(selectedBranch);
        } catch (NullPointerException e) {
            //get selected row
            int row = table.getSelectedRow();

            //make sure a row is selected
            if (row < 0) {
                JOptionPane.showMessageDialog(rootPane, "You must select a branch", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // get the current Branch
            selectedBranch = (Branch) table.getValueAt(row, BranchTableModel.OBJECT_COL);
            addNewBranch.populateGUI(selectedBranch);
        }
        addNewBranch.setVisible(true);
    }//GEN-LAST:event_btnUpdateBranchActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        //get selected row
        int row = table.getSelectedRow();
        // get the current Branch
        selectedBranch = (Branch) table.getValueAt(row, BranchTableModel.OBJECT_COL);
    }//GEN-LAST:event_tableMouseClicked

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        //get selected row
        int row = table.getSelectedRow();
        // get the current Branch
        selectedBranch = (Branch) table.getValueAt(row, BranchTableModel.OBJECT_COL);
    }//GEN-LAST:event_tableKeyReleased

    public void refreshGUI() {
        try {
            // get all branch theough the DAC to a tempory List
            List branchList = branchDAC.getAllBranchOrderByBranchCode();

            // create the model and update the "table"
            BranchTableModel model = new BranchTableModel(branchList);
            table.setModel(model);
            table.getColumnModel().getColumn(0).setMaxWidth(150);
            table.getColumnModel().getColumn(0).setMinWidth(150);
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
            table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

            autocmbBranchCode.setKeyWord(getBranchCodes());
            autocmbBranchName.setKeyWord(getBranchNames());

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(this, "Error: " + exc, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new AluminiumLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    ManageBranches dialog = new ManageBranches(new javax.swing.JFrame(), true, new BranchDAC(DbConnector.getInstance().getMyConn()));
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ManageBranches.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private acombo.AutoComboBox autocmbBranchCode;
    private acombo.AutoComboBox autocmbBranchName;
    private javax.swing.JButton btnAddNewBranch;
    private javax.swing.JButton btnRemoveBranch;
    private javax.swing.JButton btnUpdateBranch;
    private javax.swing.JButton btnViewBranch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
